/**
 * D·ª± √°n: EFB - English For Beginners
 * \* M·ª•c ƒë√≠ch: X√¢y d·ª±ng ·ª©ng d·ª•ng h·ªçc ti·∫øng Anh c∆° b·∫£n.
 * ng∆∞·ªùi d√πng: Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu h·ªçc ti·∫øng Anh.
 * Ch·ª©c nƒÉng: ƒêƒÉng nh·∫≠p, ƒëƒÉng k√Ω, h·ªçc t·ª´ v·ª±ng, ng·ªØ ph√°p, luy·ªán nghe n√≥i.
 * C√¥ng ngh·ªá: React Native, Expo, Firebase.
 * \* T√°c gi·∫£: [NH√ìM EFB]
 * Ng√†y t·∫°o: 01/06/2025
 */
/**
 * RegisterScreen.tsx
 * -------------------------------------------------------------------
 * M√†n h√¨nh ƒëƒÉng k√Ω t√†i kho·∫£n v·ªõi Email + Password (k√®m Name, Phone),
 * c√≥ n√∫t Sign up b·∫±ng Google (hook useGoogleLogin ƒë√£ c·∫•u h√¨nh ·ªü ngo√†i).
 * M·ª•c ti√™u ch√∫ th√≠ch: r√µ r√†ng, d·ªÖ s·ª≠a khi l·ªói, n√™u r·ªßi ro th·ª±c t·∫ø.
 *
 * L∆ØU √ù QUAN TR·ªåNG CHO CODER:
 * 1) T√≠nh duy nh·∫•t c·ªßa username:
 *    - ·ªû lu·ªìng ƒëƒÉng nh·∫≠p b·∫°n ƒëang tra theo field 'name' (lowercase).
 *    - N·∫øu mu·ªën d√πng 'name' nh∆∞ username ƒë·ªÉ ƒëƒÉng nh·∫≠p, H√ÉY l∆∞u th√™m
 *      'usernameLower' = name.toLowerCase() v√† ƒë·∫£m b·∫£o unique trong DB.
 *    - N·∫øu 'name' ch·ªâ l√† display name (kh√¥ng unique), KH√îNG n√™n d√πng ƒë·ªÉ login.
 *
 * 2) X√°c th·ª±c d·ªØ li·ªáu ƒë·∫ßu v√†o:
 *    - Email: n√™n chu·∫©n ho√° v√† regex ki·ªÉm tra.
 *    - Password: n√™n c√≥ rule t·ªëi thi·ªÉu (ƒë·ªô d√†i, c√≥ s·ªë/k√Ω t·ª± ƒë·∫∑c bi·ªát...).
 *    - Phone: code hi·ªán y√™u c·∫ßu ƒë√∫ng 10 ch·ªØ s·ªë. T√πy qu·ªëc gia m√† rule kh√°c.
 *
 * 3) T·∫°o h·ªì s∆° Firestore:
 *    - Sau createUserWithEmailAndPassword, t·∫°o document t·∫°i 'users/{uid}'.
 *    - B·∫°n c√≥ th·ªÉ b·ªï sung c√°c field: level, startMode, role, createdAt...
 *    - G·ª£i √Ω: th√™m 'usernameLower' n·∫øu d√πng username ƒë·ªÉ login ·ªü n∆°i kh√°c.
 *
 * 4) ƒêi·ªÅu h∆∞·ªõng sau ƒëƒÉng k√Ω:
 *    - Hi·ªán chuy·ªÉn t·ªõi '/(onboarding)/SelectLevel'.
 *    - C√≥ th·ªÉ thay ƒë·ªïi theo flow (v√≠ d·ª•: v·ªÅ /login, ho·∫∑c v√†o tabs...).
 *
 * 5) Google Sign up:
 *    - N√∫t Google ƒëang g·ªçi promptAsync() ‚Äî hook ·ªü ngo√†i ch·ªãu tr√°ch nhi·ªám.
 *    - N·∫øu mu·ªën t·ª± ƒë·ªông t·∫°o h·ªì s∆° Firestore sau Google Sign up, ƒë·∫£m b·∫£o
 *      lu·ªìng ƒë√≥ l√†m ƒëi·ªÅu n√†y (xem LoginScreen ph·∫ßn Google).
 *
 * 6) Th√¥ng b√°o l·ªói:
 *    - Alert hi·ªÉn th·ªã error.message t·ª´ Firebase c√≥ th·ªÉ th√¥ v·ªõi ng∆∞·ªùi d√πng.
 *    - C√≥ th·ªÉ map error.code -> message Vi·ªát ho√° th√¢n thi·ªán h∆°n.
 *
 * 7) B·∫£o m·∫≠t:
 *    - Kh√¥ng log password, token, th√¥ng tin nh·∫°y c·∫£m.
 *    - Tr√™n production, ki·ªÉm so√°t log v√† b·∫≠t App Check n·∫øu c·∫ßn.
 * -------------------------------------------------------------------
 */

import { auth, db } from '@/scripts/firebase';
import { useGoogleLogin } from '@/scripts/googleAuth';
import { FontAwesome5 } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { createUserWithEmailAndPassword } from 'firebase/auth';
import { doc, setDoc } from 'firebase/firestore';
import React, { useMemo, useState } from 'react';
import {
  Alert,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  Text,
  TextInput,
  TouchableOpacity,
  View
} from 'react-native';
import { styles } from '../../components/style/auth/RegisterStyles';

// --------- Helpers ƒë∆°n gi·∫£n cho validation/normalize ---------
const normalize = (s: string) => s?.trim();
const isEmail = (s: string) => /\S+@\S+\.\S+/.test(s);
const strongEnough = (s: string) => s.length >= 6; // t·ªëi thi·ªÉu, t√πy policy

export default function RegisterScreen() {
  const router = useRouter();

  // Form state
  const [number, setNumber] = useState('');                // S·ªë ƒëi·ªán tho·∫°i (10 digits theo rule hi·ªán t·∫°i)
  const [name, setName] = useState('');                    // T√™n hi·ªÉn th·ªã ho·∫∑c username (tu·ª≥ b·∫°n ƒë·ªãnh nghƒ©a)
  const [email, setEmail] = useState('');                  // Email ƒëƒÉng k√Ω
  const [password, setPassword] = useState('');            // M·∫≠t kh·∫©u
  const [confirmPassword, setConfirmPassword] = useState(''); // Nh·∫≠p l·∫°i m·∫≠t kh·∫©u

  // Hi·ªÉn th·ªã/·∫©n m·∫≠t kh·∫©u
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  // Google OAuth (ƒëƒÉng k√Ω nhanh): lu·ªìng th·ª±c hi·ªán trong hook
  const { promptAsync } = useGoogleLogin();

  // C√≥ th·ªÉ memoize rule/hint hi·ªÉn th·ªã (v√≠ d·ª• h∆∞·ªõng d·∫´n format)
  const phoneHint = useMemo(() => 'S·ªë ƒëi·ªán tho·∫°i 10 ch·ªØ s·ªë (VD: 0912345678)', []);

  /**
   * X·ª¨ L√ù ƒêƒÇNG K√ù EMAIL/PASSWORD
   * - Validate c∆° b·∫£n: ƒë·ªß tr∆∞·ªùng, phone 10 s·ªë, email h·ª£p l·ªá, password kh·ªõp.
   * - T·∫°o user tr√™n Firebase Auth -> l·∫•y uid -> setDoc v√†o Firestore.
   * - ƒêi·ªÅu h∆∞·ªõng v√†o flow onboarding (ch·ªçn level).
   */
  const handleRegister = async () => {
    const n = normalize(name);
    const e = normalize(email);
    const p = password;          // gi·ªØ nguy√™n ƒë·ªÉ kh√¥ng v√¥ t√¨nh c·∫Øt k√Ω t·ª±
    const cp = confirmPassword;
    const ph = number;

    // Validate r·ªóng
    if (!e || !p || !n || !ph || !cp) {
      Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin.');
      return;
    }

    // Validate email
    if (!isEmail(e)) {
      Alert.alert('L·ªói', 'Email kh√¥ng h·ª£p l·ªá.');
      return;
    }

    // Validate phone (10 ch·ªØ s·ªë)
    if (ph.length !== 10 || !/^\d+$/.test(ph)) {
      Alert.alert('L·ªói', 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i g·ªìm ƒë√∫ng 10 ch·ªØ s·ªë.');
      return;
    }

    // Validate password
    if (!strongEnough(p)) {
      Alert.alert('L·ªói', 'M·∫≠t kh·∫©u ph·∫£i t·ª´ 6 k√Ω t·ª± tr·ªü l√™n.');
      return;
    }

    // So kh·ªõp confirm
    if (p !== cp) {
      Alert.alert('L·ªói', 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp.');
      return;
    }

    try {
      // 1) T·∫°o user auth
      const userCredential = await createUserWithEmailAndPassword(auth, e, p);
      const uid = userCredential.user.uid;

      // 2) T·∫°o h·ªì s∆° Firestore
      await setDoc(doc(db, 'users', uid), {
        name: n,
        email: e,
        number: ph,
        role: 'user',        // m·∫∑c ƒë·ªãnh user; admin/premium g√°n sau trong admin panel
        level: null,         // ch∆∞a ch·ªçn level
        startMode: null,     // ch∆∞a ch·ªçn start mode / ch∆∞a qua onboarding
        createdAt: new Date(),
        // usernameLower: n.toLowerCase(), // üëâ N·∫øu d√πng 'name' nh∆∞ username ƒë·ªÉ login, b·∫≠t d√≤ng n√†y v√† ƒë·∫£m b·∫£o uniqueness
      });

      // 3) Th√¥ng b√°o + ƒëi·ªÅu h∆∞·ªõng
      Alert.alert('Th√†nh c√¥ng', 'ƒêƒÉng k√Ω th√†nh c√¥ng!');
      router.replace('/(onboarding)/SelectLevel');
    } catch (error: any) {
      // Map l·ªói th√¢n thi·ªán h∆°n n·∫øu mu·ªën:
      // - auth/email-already-in-use
      // - auth/invalid-email
      // - auth/weak-password
      let message = 'ƒêƒÉng k√Ω th·∫•t b·∫°i!';
      switch (error?.code) {
        case 'auth/email-already-in-use':
          message = 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.';
          break;
        case 'auth/invalid-email':
          message = 'Email kh√¥ng h·ª£p l·ªá.';
          break;
        case 'auth/weak-password':
          message = 'M·∫≠t kh·∫©u qu√° y·∫øu (√≠t nh·∫•t 6 k√Ω t·ª±).';
          break;
        default:
          // Gi·ªØ fallback ƒë·ªÉ v·∫´n th·∫•y chi ti·∫øt khi debug
          message = error?.message || message;
      }
      Alert.alert('L·ªói', message);
      console.error('[RegisterError]', error);
    }
  };

  return (
    <KeyboardAvoidingView
      style={{ flex: 1 }}
      behavior={Platform.OS === 'ios' ? 'padding' : undefined}
    >
      <ScrollView
        contentContainerStyle={[styles.container, { flexGrow: 1 }]}
        keyboardShouldPersistTaps="handled"
        showsVerticalScrollIndicator={true}
      >
        {/* Ti√™u ƒë·ªÅ ch√≠nh */}
        <Text style={styles.title}>WELCOME{"\n"}EFB</Text>

        {/* Name (display/username) */}
        <Text style={styles.label}>NAME</Text>
        <TextInput
          placeholder="Name"
          style={styles.input}
          value={name}
          onChangeText={setName}
          placeholderTextColor={'#888'}
          autoCapitalize="words" // N·∫øu ƒë√¢y l√† Display Name, d√πng words; n·∫øu l√† username, n√™n d√πng "none"
        />

        {/* Email */}
        <Text style={styles.label}>EMAIL</Text>
        <TextInput
          placeholder="EnglishForBeginner@gmail.com"
          style={styles.input}
          value={email}
          onChangeText={setEmail}
          keyboardType="email-address"
          placeholderTextColor={'#888'}
          autoCapitalize="none"
        />

        {/* Phone */}
        <Text style={styles.label}>PHONE NUMBER</Text>
        <TextInput
          placeholder="0123456789"
          style={styles.input}
          value={number}
          onChangeText={(text) => setNumber(text.replace(/[^0-9]/g, ''))} // Ch·ªâ gi·ªØ s·ªë
          keyboardType="phone-pad"
          placeholderTextColor={'#888'}
        />
        <Text style={{ color: '#999', marginBottom: 8 }}>{phoneHint}</Text>

        {/* Password */}
        <Text style={styles.label}>PASSWORD</Text>
        <View style={{ position: 'relative' }}>
          <TextInput
            placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
            style={styles.input}
            value={password}
            onChangeText={setPassword}
            secureTextEntry={!showPassword}
            placeholderTextColor={'#888'}
            autoCapitalize="none"
            textContentType="oneTimeCode" // tr√°nh g·ª£i √Ω iOS autofill password c≈© (tu·ª≥ ch·ªçn)
          />
          <TouchableOpacity
            onPress={() => setShowPassword((s) => !s)}
            style={{ position: 'absolute', right: 12, top: 12 }}
          >
            <FontAwesome5
              name={showPassword ? 'eye' : 'eye-slash'}
              size={18}
              color="#888"
            />
          </TouchableOpacity>
        </View>

        {/* Confirm Password */}
        <Text style={styles.label}>CONFIRM PASSWORD</Text>
        <View style={{ position: 'relative' }}>
          <TextInput
            placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
            style={styles.input}
            value={confirmPassword}
            onChangeText={setConfirmPassword}
            secureTextEntry={!showConfirmPassword}
            placeholderTextColor={'#888'}
            autoCapitalize="none"
          />
          <TouchableOpacity
            onPress={() => setShowConfirmPassword((s) => !s)}
            style={{ position: 'absolute', right: 12, top: 12 }}
          >
            <FontAwesome5
              name={showConfirmPassword ? 'eye' : 'eye-slash'}
              size={18}
              color="#888"
            />
          </TouchableOpacity>
        </View>

        {/* N√∫t Submit */}
        <TouchableOpacity style={styles.button} onPress={handleRegister}>
          <Text style={styles.buttonText}>Sign up</Text>
        </TouchableOpacity>

        {/* Chuy·ªÉn qua Login */}
        <Text style={styles.switch} onPress={() => router.push('/login')}>
          ƒë√£ c√≥ t√†i kho·∫£n? ƒêƒÉng nh·∫≠p
        </Text>

        {/* Social Sign up */}
        <View style={{ marginTop: 30 }}>
          {/* Google sign up:
              - promptAsync() s·∫Ω m·ªü Google OAuth.
              - H√ÉY ƒë·∫£m b·∫£o lu·ªìng Google ·ªü n∆°i kh√°c t·∫°o Firestore doc n·∫øu user m·ªõi. */}
          <TouchableOpacity
            style={[styles.socialButton, { backgroundColor: '#fff', borderWidth: 1, borderColor: '#ccc' }]}
            onPress={() => promptAsync()}
          >
            <FontAwesome5 name="google" size={20} color="#DB4437" style={styles.socialIcon} />
            <Text style={[styles.socialText, { color: '#444' }]}>Google Sign up</Text>
          </TouchableOpacity>

          {/* Facebook sign up (ch∆∞a implement):
              - C·∫ßn expo-auth-session/providers/facebook ho·∫∑c react-native-fbsdk-next
              - Sau khi c√≥ accessToken => FacebookAuthProvider.credential(token) => create/sign in */}
          <TouchableOpacity style={[styles.socialButton, { backgroundColor: '#1877F2' }]}>
            <FontAwesome5 name="facebook-f" size={20} color="#fff" style={styles.socialIcon} />
            <Text style={styles.socialText}>Facebook Sign up</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </KeyboardAvoidingView>
  );
}
