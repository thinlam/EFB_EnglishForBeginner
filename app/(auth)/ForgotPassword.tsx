/**
 * D·ª± √°n: EFB - English For Beginners
 * \* M·ª•c ƒë√≠ch: X√¢y d·ª±ng ·ª©ng d·ª•ng h·ªçc ti·∫øng Anh c∆° b·∫£n.
 * ng∆∞·ªùi d√πng: Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu h·ªçc ti·∫øng Anh.
 * Ch·ª©c nƒÉng: ƒêƒÉng nh·∫≠p, ƒëƒÉng k√Ω, h·ªçc t·ª´ v·ª±ng, ng·ªØ ph√°p, luy·ªán nghe n√≥i.
 * C√¥ng ngh·ªá: React Native, Expo, Firebase.
 * \* T√°c gi·∫£: [NH√ìM EFB]
 * Ng√†y t·∫°o: 01/06/2025
 */

/**
 * ForgotPasswordScreen.tsx
 * -------------------------------------------------------------------
 * M√†n h√¨nh: G·ª≠i OTP v·ªÅ email v√† x√°c th·ª±c OTP tr∆∞·ªõc khi cho ng∆∞·ªùi d√πng
 * v√†o m√†n h√¨nh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u (/reset-password).
 *
 * M·ª§C TI√äU: CH√ö TH√çCH R·∫§T CHI TI·∫æT, ƒë·ªÉ coder m·ªõi v√†o l√† hi·ªÉu ngay flow,
 * bi·∫øt ch·ªó n√†o d·ªÖ l·ªói, ch·ªó n√†o c·∫ßn ƒë·ªïi khi l√™n production.
 *
 * üîê C·∫¢NH B√ÅO B·∫¢O M·∫¨T (PRODUCTION MUST-DO):
 * - DEMO d∆∞·ªõi ƒë√¢y c√≥ bi·∫øn `serverOtp` gi·ªØ OTP do server tr·∫£ v·ªÅ => KH√îNG AN TO√ÄN.
 * - Tri·ªÉn khai th·∫≠t: server KH√îNG tr·∫£ OTP v·ªÅ client.
 *   ‚úî Server n√™n tr·∫£ v·ªÅ `transactionId` (ho·∫∑c session token/ticket).
 *   ‚úî Client l∆∞u `transactionId` (KH√îNG l∆∞u OTP).
 *   ‚úî Khi user nh·∫≠p OTP -> g·ªçi API /verify-otp { email, transactionId, otp }.
 *   ‚úî Server ki·ªÉm tra v√† tr·∫£ { success: true } n·∫øu ƒë√∫ng, KH√îNG g·ª≠i OTP th·∫≠t ra ngo√†i.
 *
 * üß™ KI·ªÇM TH·ª¨:
 * - Test email h·ª£p l·ªá/kh√¥ng h·ª£p l·ªá.
 * - Test g·ª≠i OTP th√†nh c√¥ng/th·∫•t b·∫°i (server down, timeout, 4xx/5xx).
 * - Test nh·∫≠p OTP ƒë√∫ng/sai/h·∫øt h·∫°n.
 * - Test ·∫•n li√™n t·ª•c khi loading (double-tap).
 * - Test resend OTP (cooldown).
 *
 * ‚ôøÔ∏è ACCESSIBILITY:
 * - Th√™m c√°c thu·ªôc t√≠nh nh∆∞ accessibilityLabel cho buttons n·∫øu c·∫ßn.
 *
 * ‚öôÔ∏è TU·ª≤ CH·ªàNH NHANH:
 * - OTP_LENGTH: s·ªë k√Ω t·ª± OTP (ph·ªï bi·∫øn 6).
 * - COOLDOWN_SECONDS: th·ªùi gian kho√° n√∫t "G·ª≠i l·∫°i OTP".
 * - API_BASE/ENDPOINTS: c·∫•u h√¨nh endpoint. ƒê∆∞a v√†o .env n·∫øu c√≥.
 * -------------------------------------------------------------------
 */

import { useRouter } from 'expo-router';
import React, { useEffect, useMemo, useRef, useState } from 'react';
import {
  Alert,
  KeyboardAvoidingView,
  Platform,
  Text,
  TextInput,
  TouchableOpacity,
  View
} from 'react-native';

// =====================
// 1) H·∫∞NG S·ªê C·∫§U H√åNH
// =====================

// ƒê·ªò D√ÄI OTP (tu·ª≥ server ph√°t sinh m·∫•y ch·ªØ s·ªë)
const OTP_LENGTH = 6;

// TH·ªúI GIAN ƒê·∫æM NG∆Ø·ª¢C CHO "G·ª¨I L·∫†I OTP" (gi√¢y)
const COOLDOWN_SECONDS = 60;

// ‚ö†Ô∏è ƒê∆ØA V√ÄO .env KHI L√äN PROD (v√≠ d·ª• EXPO_PUBLIC_API_BASE)
// ·ªû ƒë√¢y ƒë·ªÉ c·ª©ng cho d·ªÖ ch·∫°y demo.
const API_BASE = 'https://otp-server-production-6c26.up.railway.app';
const ENDPOINTS = {
  SEND_OTP: `${API_BASE}/send-otp`,
  // VERIFY_OTP: `${API_BASE}/verify-otp`, // üëâ PROD: b·∫≠t endpoint n√†y v√† d√πng transactionId
};

// Regex email c∆° b·∫£n (t·ªët h∆°n includes('@'))
const isEmail = (s: string) => /\S+@\S+\.\S+/.test(s);

// Timeout cho fetch (RN kh√¥ng c√≥ s·∫µn) ‚Äî tr√°nh ch·ªù v√¥ h·∫°n n·∫øu server treo
async function fetchWithTimeout(resource: RequestInfo, options: RequestInit = {}, timeoutMs = 15000) {
  const controller = new AbortController();
  const id = setTimeout(() => controller.abort(), timeoutMs);
  try {
    const response = await fetch(resource, { ...options, signal: controller.signal });
    return response;
  } finally {
    clearTimeout(id);
  }
}

export default function ForgotPasswordScreen() {
  // =====================
  // 2) STATE QU·∫¢N L√ù FORM
  // =====================

  const [email, setEmail] = useState('');      // Email ng∆∞·ªùi d√πng
  const [otp, setOtp] = useState('');          // OTP user nh·∫≠p
  const [sentOtp, setSentOtp] = useState(false); // ƒê√£ g·ª≠i OTP th√†nh c√¥ng hay ch∆∞a (ƒë·ªÉ hi·ªán input OTP)
  const [loading, setLoading] = useState(false); // Loading chung (disable n√∫t b·∫•m)

  // ‚ö†Ô∏è DEMO ONLY: Server tr·∫£ OTP v·ªÅ -> l∆∞u v√†o client (KH√îNG l√†m khi l√™n PROD)
  const [serverOtp, setServerOtp] = useState('');

  // (PROD) N·∫øu server tr·∫£ transactionId, l∆∞u n√≥ ·ªü ƒë√¢y:
  // const [transactionId, setTransactionId] = useState<string | null>(null);

  // Resend cooldown
  const [cooldown, setCooldown] = useState(0);
  const cooldownRef = useRef<NodeJS.Timeout | null>(null);

  const router = useRouter();

  // Title c√≥ emoji cho th√¢n thi·ªán
  const titleText = useMemo(() => 'üîê Nh·∫≠p Gmail ƒë·ªÉ nh·∫≠n m√£ OTP', []);

  // Cleanup interval khi unmount
  useEffect(() => {
    return () => {
      if (cooldownRef.current) clearInterval(cooldownRef.current);
    };
  }, []);

  // B·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c sau khi g·ª≠i OTP th√†nh c√¥ng
  const startCooldown = () => {
    setCooldown(COOLDOWN_SECONDS);
    if (cooldownRef.current) clearInterval(cooldownRef.current);
    cooldownRef.current = setInterval(() => {
      setCooldown((prev) => {
        if (prev <= 1) {
          if (cooldownRef.current) clearInterval(cooldownRef.current);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
  };

  // =====================
  // 3) G·ª¨I OTP T·ªöI EMAIL
  // =====================
  const sendOtp = async () => {
    // 3.1 Validate email
    if (!isEmail(email)) {
      Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá.');
      return;
    }

    // 3.2 Ch·∫∑n spam khi ƒëang loading ho·∫∑c trong th·ªùi gian cooldown
    if (loading || cooldown > 0) return;

    try {
      setLoading(true);

      // 3.3 G·ªçi API g·ª≠i OTP (POST JSON)
      const res = await fetchWithTimeout(
        ENDPOINTS.SEND_OTP,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          // Tu·ª≥ server c√≥ th·ªÉ c·∫ßn th√™m headers kh√°c (Authorization, v.v.)
          body: JSON.stringify({ email }),
        },
        15000 // timeout 15s
      );

      // 3.4 Parse JSON v√† ph√¢n nh√°nh
      const data = await res.json().catch(() => ({}));

      if (res.ok && data?.success) {
        setSentOtp(true);

        // ‚ö†Ô∏è DEMO ONLY: KH√îNG l√†m th·∫ø n√†y tr√™n production!
        // Server tr·∫£ v·ªÅ `data.otp` => l∆∞u v√†o state ƒë·ªÉ so s√°nh ·ªü client.
        // PROD: server ch·ªâ tr·∫£ `transactionId`, KH√îNG tr·∫£ OTP.
        setServerOtp(data.otp ?? '');

        // (PROD) V√≠ d·ª•:
        // setTransactionId(data.transactionId);

        // 3.5 B·∫Øt ƒë·∫ßu cooldown resend
        startCooldown();

        Alert.alert('Th√†nh c√¥ng', 'OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn Gmail c·ªßa b·∫°n.');
      } else {
        // 3.6 Th·∫•t b·∫°i t·ª´ server: hi·ªÉn th·ªã message c·ª• th·ªÉ n·∫øu c√≥
        const msg =
          data?.message ||
          (res.status === 429
            ? 'B·∫°n thao t√°c qu√° nhanh, vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.'
            : 'Kh√¥ng g·ª≠i ƒë∆∞·ª£c OTP, vui l√≤ng th·ª≠ l·∫°i.');
        Alert.alert('L·ªói', msg);
      }
    } catch (err: any) {
      // 3.7 L·ªói m·∫°ng, CORS, timeout, server treo...
      const aborted = err?.name === 'AbortError';
      console.error('L·ªói g·ª≠i OTP:', err);
      Alert.alert('L·ªói', aborted ? 'H·∫øt th·ªùi gian ch·ªù, vui l√≤ng th·ª≠ l·∫°i.' : 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.');
    } finally {
      setLoading(false);
    }
  };

  // =====================
  // 4) X√ÅC TH·ª∞C OTP
  // =====================
  const verifyOtp = async () => {
    // 4.1 Ch∆∞a g·ª≠i OTP -> nh·∫Øc user g·ª≠i tr∆∞·ªõc
    if (!sentOtp) {
      Alert.alert('L·ªói', 'Vui l√≤ng g·ª≠i m√£ OTP tr∆∞·ªõc.');
      return;
    }

    // 4.2 Validate ƒë·ªô d√†i OTP
    if (!otp || otp.length < OTP_LENGTH) {
      Alert.alert('L·ªói', `Vui l√≤ng nh·∫≠p ƒë·ªß ${OTP_LENGTH} k√Ω t·ª± OTP.`);
      return;
    }

    // 4.3 DEMO: so s√°nh tr·ª±c ti·∫øp ·ªü client (KH√îNG d√πng khi l√™n PROD)
    if (otp === serverOtp) {
      // 4.4 ƒêi·ªÅu h∆∞·ªõng sang m√†n reset password k√®m email
      router.push({ pathname: '/reset-password', params: { email } });
      return;
    } else {
      Alert.alert('Sai m√£', 'M√£ OTP kh√¥ng ƒë√∫ng.');
      return;
    }

    /**
     * 4.x (PRODUCTION) ‚Äî D√ôNG VERIFY API:
     * if (loading) return;
     * try {
     *   setLoading(true);
     *   const res = await fetchWithTimeout(ENDPOINTS.VERIFY_OTP, {
     *     method: 'POST',
     *     headers: { 'Content-Type': 'application/json' },
     *     body: JSON.stringify({ email, transactionId, otp }),
     *   }, 15000);
     *   const data = await res.json().catch(() => ({}));
     *   if (res.ok && data?.success) {
     *     router.push({ pathname: '/reset-password', params: { email } });
     *   } else {
     *     Alert.alert('Sai m√£', data?.message || 'OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n.');
     *   }
     * } catch (err: any) {
     *   const aborted = err?.name === 'AbortError';
     *   Alert.alert('L·ªói', aborted ? 'H·∫øt th·ªùi gian ch·ªù, vui l√≤ng th·ª≠ l·∫°i.' : 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.');
     * } finally {
     *   setLoading(false);
     * }
     */
  };

  // =====================
  // 5) UI / RENDER
  // =====================
  return (
    <KeyboardAvoidingView
      behavior={Platform.OS === 'ios' ? 'padding' : undefined} // iOS: ƒë·∫©y n·ªôi dung l√™n khi b√†n ph√≠m m·ªü
      style={{
        flex: 1,
        backgroundColor: '#f8f9ff',
        padding: 24,
      }}
    >
      {/* Ph·∫ßn form ƒë·∫∑t gi·ªØa m√†n h√¨nh */}
      <View style={{ flex: 1, justifyContent: 'center' }}>
        {/* Ti√™u ƒë·ªÅ */}
        <Text style={{ fontSize: 20, fontWeight: 'bold', marginBottom: 8, color: '#333' }}>
          {titleText}
        </Text>

        {/* √î nh·∫≠p email */}
        <TextInput
          placeholder="example@gmail.com"
          value={email}
          onChangeText={(t) => setEmail(t.trim())} // Trim b·ªõt kho·∫£ng tr·∫Øng v√¥ t√¨nh
          keyboardType="email-address"
          placeholderTextColor={'#888'}
          autoCapitalize="none"
          autoCorrect={false}
          editable={!loading} // Kho√° khi loading ƒë·ªÉ tr√°nh ƒë·ªïi input trong l√∫c g·ªçi API
          style={{
            backgroundColor: '#fff',
            padding: 14,
            borderRadius: 10,
            fontSize: 16,
            shadowColor: '#ccc',
            shadowOpacity: 0.2,
            shadowRadius: 4,
            elevation: 2,
            marginBottom: 12,
          }}
        />
        {/* G·ª£i √Ω nh·ªè: format email ƒë√∫ng m·ªõi g·ª≠i ƒë∆∞·ª£c */}
        <Text style={{ color: '#888', marginBottom: 16, fontSize: 13 }}>
          Nh·∫≠p email ƒë√£ ƒëƒÉng k√Ω ƒë·ªÉ nh·∫≠n m√£ OTP (m√£ c√≥ hi·ªáu l·ª±c trong √≠t ph√∫t).
        </Text>

        {/* Khi ƒë√£ g·ª≠i OTP, hi·ªÉn th·ªã √¥ nh·∫≠p OTP */}
        {sentOtp && (
          <>
            <Text style={{ fontSize: 16, fontWeight: '600', marginBottom: 8, color: '#444' }}>
              üì© Nh·∫≠p m√£ OTP v·ª´a nh·∫≠n
            </Text>
            <TextInput
              placeholder={`Nh·∫≠p ${OTP_LENGTH} s·ªë OTP`}
              value={otp}
              onChangeText={(t) => setOtp(t.replace(/[^0-9]/g, '').slice(0, OTP_LENGTH))} // ch·ªâ cho s·ªë & t·ªëi ƒëa OTP_LENGTH
              keyboardType="numeric"
              placeholderTextColor={'#888'}
              autoCapitalize="none"
              autoCorrect={false}
              maxLength={OTP_LENGTH}
              editable={!loading}
              style={{
                backgroundColor: '#fff',
                padding: 14,
                borderRadius: 10,
                fontSize: 16,
                letterSpacing: 4, // nh√¨n nh∆∞ √¥ code
                shadowColor: '#ccc',
                shadowOpacity: 0.2,
                shadowRadius: 4,
                elevation: 2,
                marginBottom: 20,
              }}
            />
          </>
        )}

        {/* N√∫t CH√çNH: n·∫øu ch∆∞a g·ª≠i th√¨ l√† G·ª≠i OTP; ƒë√£ g·ª≠i th√¨ l√† X√°c nh·∫≠n OTP */}
        <TouchableOpacity
          onPress={sentOtp ? verifyOtp : sendOtp}
          disabled={loading}
          style={{
            backgroundColor: '#6C63FF',
            paddingVertical: 14,
            borderRadius: 10,
            shadowColor: '#6C63FF',
            shadowOpacity: 0.3,
            shadowOffset: { width: 0, height: 2 },
            shadowRadius: 4,
            elevation: 4,
            opacity: loading ? 0.7 : 1,
            marginBottom: 10,
          }}
        >
          <Text style={{ color: 'white', textAlign: 'center', fontWeight: 'bold', fontSize: 16 }}>
            {loading
              ? (sentOtp ? 'ƒêANG X√ÅC NH·∫¨N...' : 'ƒêANG G·ª¨I...')
              : (sentOtp ? 'X√ÅC NH·∫¨N OTP' : 'G·ª¨I M√É V·ªÄ GMAIL')}
          </Text>
        </TouchableOpacity>

        {/* N√∫t PH·ª§: G·ª≠i l·∫°i OTP (hi·ªán khi ƒë√£ g·ª≠i) + cooldown ƒë·ªÉ tr√°nh spam */}
        {sentOtp && (
          <TouchableOpacity
            onPress={sendOtp}
            disabled={loading || cooldown > 0}
            style={{ marginBottom: 16 }}
          >
            <Text style={{ textAlign: 'center', color: (loading || cooldown > 0) ? '#aaa' : '#6C63FF', fontWeight: '600' }}>
              {cooldown > 0 ? `G·ª≠i l·∫°i OTP sau ${cooldown}s` : 'G·ª≠i l·∫°i OTP'}
            </Text>
          </TouchableOpacity>
        )}

        {/* Link quay v·ªÅ trang ƒëƒÉng nh·∫≠p */}
        <TouchableOpacity onPress={() => router.replace('/login')}>
          <Text style={{ color: '#6C63FF', fontSize: 17, fontWeight: 'bold', textAlign: 'center' }}>
            ‚¨Ö Quay l·∫°i trang ƒëƒÉng nh·∫≠p
          </Text>
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
}
